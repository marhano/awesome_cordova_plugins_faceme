var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var FaceMeOriginal = /** @class */ (function (_super) {
    __extends(FaceMeOriginal, _super);
    function FaceMeOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FaceMeOriginal.prototype.testPlugin = function () { return cordova(this, "testPlugin", {}, arguments); };
    FaceMeOriginal.prototype.initializeSDK = function () { return cordova(this, "initializeSDK", {}, arguments); };
    FaceMeOriginal.prototype.activateLicense = function () { return cordova(this, "activateLicense", {}, arguments); };
    FaceMeOriginal.prototype.deactivateLicense = function () { return cordova(this, "deactivateLicense", {}, arguments); };
    FaceMeOriginal.prototype.detectFace = function (base64Image) { return cordova(this, "detectFace", {}, arguments); };
    FaceMeOriginal.prototype.enrollFace = function (base64Image) { return cordova(this, "enrollFace", {}, arguments); };
    FaceMeOriginal.prototype.recognizeFace = function () { return cordova(this, "recognizeFace", {}, arguments); };
    FaceMeOriginal.prototype.deleteFace = function (faceId) { return cordova(this, "deleteFace", {}, arguments); };
    FaceMeOriginal.prototype.updateFace = function () { return cordova(this, "updateFace", {}, arguments); };
    FaceMeOriginal.prototype.selectFace = function () { return cordova(this, "selectFace", {}, arguments); };
    FaceMeOriginal.prototype.addFace = function (username) { return cordova(this, "addFace", {}, arguments); };
    FaceMeOriginal.prototype.startAntiSpoofing = function () { return cordova(this, "startAntiSpoofing", {}, arguments); };
    FaceMeOriginal.prototype.stopAntiSpoofing = function () { return cordova(this, "stopAntiSpoofing", {}, arguments); };
    FaceMeOriginal.pluginName = "FaceMe";
    FaceMeOriginal.plugin = "https://github.com/marhano/cordova_plugin_faceme.git";
    FaceMeOriginal.pluginRef = "FaceMe";
    FaceMeOriginal.repo = "https://github.com/marhano/cordova_plugin_faceme";
    FaceMeOriginal.install = "";
    FaceMeOriginal.installVariables = [];
    FaceMeOriginal.platforms = ["Android"];
    return FaceMeOriginal;
}(AwesomeCordovaNativePlugin));
var FaceMe = new FaceMeOriginal();
export { FaceMe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMvZmFjZS1tZS9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFZQSxPQUFPLHVDQUFtRyxNQUFNLCtCQUErQixDQUFDOztJQWtDcEgsMEJBQTBCOzs7O0lBT3BELDJCQUFVO0lBU1YsOEJBQWE7SUFTYixnQ0FBZTtJQVNmLGtDQUFpQjtJQVVqQiwyQkFBVSxhQUFDLFdBQW1CO0lBVTlCLDJCQUFVLGFBQUMsV0FBbUI7SUFTOUIsOEJBQWE7SUFVYiwyQkFBVSxhQUFDLE1BQWM7SUFTekIsMkJBQVU7SUFTViwyQkFBVTtJQVVWLHdCQUFPLGFBQUMsUUFBZ0I7SUFTeEIsa0NBQWlCO0lBU2pCLGlDQUFnQjs7Ozs7Ozs7aUJBcktsQjtFQThDNEIsMEJBQTBCO1NBQXpDLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogVGhpcyBpcyBhIHRlbXBsYXRlIGZvciBuZXcgcGx1Z2luIHdyYXBwZXJzXHJcbiAqXHJcbiAqIFRPRE86XHJcbiAqIC0gQWRkL0NoYW5nZSBpbmZvcm1hdGlvbiBiZWxvd1xyXG4gKiAtIERvY3VtZW50IHVzYWdlIChpbXBvcnRpbmcsIGV4ZWN1dGluZyBtYWluIGZ1bmN0aW9uYWxpdHkpXHJcbiAqIC0gUmVtb3ZlIGFueSBpbXBvcnRzIHRoYXQgeW91IGFyZSBub3QgdXNpbmdcclxuICogLSBSZW1vdmUgYWxsIHRoZSBjb21tZW50cyBpbmNsdWRlZCBpbiB0aGlzIHRlbXBsYXRlLCBFWENFUFQgdGhlIEBQbHVnaW4gd3JhcHBlciBkb2NzIGFuZCBhbnkgb3RoZXIgZG9jcyB5b3UgYWRkZWRcclxuICogLSBSZW1vdmUgdGhpcyBub3RlXHJcbiAqXHJcbiAqL1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFBsdWdpbiwgQ29yZG92YSwgQ29yZG92YVByb3BlcnR5LCBDb3Jkb3ZhSW5zdGFuY2UsIEluc3RhbmNlUHJvcGVydHksIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2NvcmUnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcblxyXG4vKipcclxuICogQG5hbWUgRmFjZSBNZVxyXG4gKiBAZGVzY3JpcHRpb25cclxuICogVGhpcyBwbHVnaW4gZG9lcyBzb21ldGhpbmdcclxuICpcclxuICogQHVzYWdlXHJcbiAqIGBgYHR5cGVzY3JpcHRcclxuICogaW1wb3J0IHsgRmFjZU1lIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL2ZhY2UtbWUnO1xyXG4gKlxyXG4gKlxyXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGZhY2VNZTogRmFjZU1lKSB7IH1cclxuICpcclxuICogLi4uXHJcbiAqXHJcbiAqXHJcbiAqIHRoaXMuZmFjZU1lLmZ1bmN0aW9uTmFtZSgnSGVsbG8nLCAxMjMpXHJcbiAqICAgLnRoZW4oKHJlczogYW55KSA9PiBjb25zb2xlLmxvZyhyZXMpKVxyXG4gKiAgIC5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xyXG4gKlxyXG4gKiBgYGBcclxuICovXHJcbkBQbHVnaW4oe1xyXG4gIHBsdWdpbk5hbWU6ICdGYWNlTWUnLFxyXG4gIHBsdWdpbjogJ2h0dHBzOi8vZ2l0aHViLmNvbS9tYXJoYW5vL2NvcmRvdmFfcGx1Z2luX2ZhY2VtZS5naXQnLCAvLyBucG0gcGFja2FnZSBuYW1lLCBleGFtcGxlOiBjb3Jkb3ZhLXBsdWdpbi1jYW1lcmFcclxuICBwbHVnaW5SZWY6ICdGYWNlTWUnLCAvLyB0aGUgdmFyaWFibGUgcmVmZXJlbmNlIHRvIGNhbGwgdGhlIHBsdWdpbiwgZXhhbXBsZTogbmF2aWdhdG9yLmdlb2xvY2F0aW9uXHJcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9tYXJoYW5vL2NvcmRvdmFfcGx1Z2luX2ZhY2VtZScsIC8vIHRoZSBnaXRodWIgcmVwb3NpdG9yeSBVUkwgZm9yIHRoZSBwbHVnaW5cclxuICBpbnN0YWxsOiAnJywgLy8gT1BUSU9OQUwgaW5zdGFsbCBjb21tYW5kLCBpbiBjYXNlIHRoZSBwbHVnaW4gcmVxdWlyZXMgdmFyaWFibGVzXHJcbiAgaW5zdGFsbFZhcmlhYmxlczogW10sIC8vIE9QVElPTkFMIHRoZSBwbHVnaW4gcmVxdWlyZXMgdmFyaWFibGVzXHJcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnXSAvLyBBcnJheSBvZiBwbGF0Zm9ybXMgc3VwcG9ydGVkLCBleGFtcGxlOiBbJ0FuZHJvaWQnLCAnaU9TJ11cclxufSlcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRmFjZU1lIGV4dGVuZHMgQXdlc29tZUNvcmRvdmFOYXRpdmVQbHVnaW4ge1xyXG5cclxuICAvKipcclxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCBmb3IgdGVzdGluZyB0aGUgRmFjZSBNZSBwbHVnaW4uXHJcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgdGVzdCBjb21wbGV0ZXMuXHJcbiAgICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgdGVzdFBsdWdpbigpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICAqIEluaXRpYWxpemVzIHRoZSBGYWNlIE1lIFNESy5cclxuICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBTREsgaXMgaW5pdGlhbGl6ZWQuXHJcbiAgICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBpbml0aWFsaXplU0RLKCk6IFByb21pc2U8YW55PntcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAgKiBBY3RpdmF0ZXMgdGhlIEZhY2UgTWUgbGljZW5zZS5cclxuICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBsaWNlbnNlIGlzIGFjdGl2YXRlZC5cclxuICAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGFjdGl2YXRlTGljZW5zZSgpOiBQcm9taXNlPGFueT57XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgICogRGVhY3RpdmF0ZXMgdGhlIEZhY2UgTWUgbGljZW5zZS5cclxuICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBsaWNlbnNlIGlzIGRlYWN0aXZhdGVkLlxyXG4gICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgZGVhY3RpdmF0ZUxpY2Vuc2UoKTogUHJvbWlzZTxhbnk+e1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICAqIERldGVjdHMgYSBmYWNlIGZyb20gYSBiYXNlNjQgZW5jb2RlZCBpbWFnZS5cclxuICAgICogQHBhcmFtIHtzdHJpbmd9IGJhc2U2NEltYWdlIFRoZSBiYXNlNjQgZW5jb2RlZCBpbWFnZS5cclxuICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBmYWNlIGRldGVjdGlvbiByZXN1bHQuXHJcbiAgICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBkZXRlY3RGYWNlKGJhc2U2NEltYWdlOiBzdHJpbmcpOiBQcm9taXNlPGFueT57XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgICogRW5yb2xscyBhIGZhY2UgZnJvbSBhIGJhc2U2NCBlbmNvZGVkIGltYWdlLlxyXG4gICAgKiBAcGFyYW0ge3N0cmluZ30gYmFzZTY0SW1hZ2UgVGhlIGJhc2U2NCBlbmNvZGVkIGltYWdlLlxyXG4gICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIGZhY2UgZW5yb2xsbWVudCBpcyBjb21wbGV0ZWQuXHJcbiAgICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBlbnJvbGxGYWNlKGJhc2U2NEltYWdlOiBzdHJpbmcpOiBQcm9taXNlPGFueT57XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgICogUmVjb2duaXplcyBhIGZhY2UuXHJcbiAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgZmFjZSByZWNvZ25pdGlvbiByZXN1bHQuXHJcbiAgICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICByZWNvZ25pemVGYWNlKCk6IFByb21pc2U8YW55PntcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAgKiBEZWxldGVzIGEgZmFjZSB3aXRoIHRoZSBzcGVjaWZpZWQgZmFjZSBJRC5cclxuICAgICogQHBhcmFtIHtudW1iZXJ9IGZhY2VJZCBUaGUgSUQgb2YgdGhlIGZhY2UgdG8gZGVsZXRlLlxyXG4gICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIGZhY2UgaXMgZGVsZXRlZC5cclxuICAgICovXHJcbiAgQENvcmRvdmEoKVxyXG4gIGRlbGV0ZUZhY2UoZmFjZUlkOiBudW1iZXIpOiBQcm9taXNlPGFueT57XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgICogVXBkYXRlcyBhIGZhY2UuXHJcbiAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgZmFjZSB1cGRhdGUgaXMgY29tcGxldGVkLlxyXG4gICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgdXBkYXRlRmFjZSgpOiBQcm9taXNlPGFueT57XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgICogU2VsZWN0cyBhIGZhY2UuXHJcbiAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgZmFjZSBzZWxlY3Rpb24gaXMgY29tcGxldGVkLlxyXG4gICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc2VsZWN0RmFjZSgpOiBQcm9taXNlPGFueT57XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgICogQWRkcyBhIGZhY2Ugd2l0aCB0aGUgc3BlY2lmaWVkIHVzZXJuYW1lLlxyXG4gICAgKiBAcGFyYW0ge3N0cmluZ30gdXNlcm5hbWUgVGhlIHVzZXJuYW1lIGFzc29jaWF0ZWQgd2l0aCB0aGUgZmFjZS5cclxuICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSBmYWNlIGlzIGFkZGVkLlxyXG4gICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgYWRkRmFjZSh1c2VybmFtZTogc3RyaW5nKTogUHJvbWlzZTxhbnk+e1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICAqIFN0YXJ0cyB0aGUgYW50aS1zcG9vZmluZyBwcm9jZXNzLlxyXG4gICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIGFudGktc3Bvb2ZpbmcgcHJvY2VzcyBpcyBzdGFydGVkLlxyXG4gICAgKi9cclxuICBAQ29yZG92YSgpXHJcbiAgc3RhcnRBbnRpU3Bvb2ZpbmcoKTogUHJvbWlzZTxhbnk+e1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICAqIFN0b3BzIHRoZSBhbnRpLXNwb29maW5nIHByb2Nlc3MuXHJcbiAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgYW50aS1zcG9vZmluZyBwcm9jZXNzIGlzIHN0b3BwZWQuXHJcbiAgICAqL1xyXG4gIEBDb3Jkb3ZhKClcclxuICBzdG9wQW50aVNwb29maW5nKCk6IFByb21pc2U8YW55PntcclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG5cclxufVxyXG4iXX0=