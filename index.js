var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var FaceMeOriginal = /** @class */ (function (_super) {
    __extends(FaceMeOriginal, _super);
    function FaceMeOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FaceMeOriginal.prototype.testPlugin = function () { return cordova(this, "testPlugin", {}, arguments); };
    FaceMeOriginal.prototype.initializeSDK = function (licenseKey) { return cordova(this, "initializeSDK", {}, arguments); };
    FaceMeOriginal.prototype.activateLicense = function (licenseKey) { return cordova(this, "activateLicense", {}, arguments); };
    FaceMeOriginal.prototype.deactivateLicense = function () { return cordova(this, "deactivateLicense", {}, arguments); };
    FaceMeOriginal.prototype.detectFace = function (base64Image) { return cordova(this, "detectFace", {}, arguments); };
    FaceMeOriginal.prototype.enrollFace = function (base64Image) { return cordova(this, "enrollFace", {}, arguments); };
    FaceMeOriginal.prototype.recognizeFace = function () { return cordova(this, "recognizeFace", {}, arguments); };
    FaceMeOriginal.prototype.deleteFace = function (faceId) { return cordova(this, "deleteFace", {}, arguments); };
    FaceMeOriginal.prototype.updateFace = function () { return cordova(this, "updateFace", {}, arguments); };
    FaceMeOriginal.prototype.selectFace = function () { return cordova(this, "selectFace", {}, arguments); };
    FaceMeOriginal.prototype.addFace = function (username) { return cordova(this, "addFace", {}, arguments); };
    FaceMeOriginal.prototype.startAntiSpoofing = function (option) { return cordova(this, "startAntiSpoofing", {}, arguments); };
    FaceMeOriginal.prototype.stopAntiSpoofing = function () { return cordova(this, "stopAntiSpoofing", {}, arguments); };
    FaceMeOriginal.pluginName = "FaceMe";
    FaceMeOriginal.plugin = "https://github.com/marhano/cordova_plugin_faceme.git";
    FaceMeOriginal.pluginRef = "FaceMe";
    FaceMeOriginal.repo = "https://github.com/marhano/cordova_plugin_faceme";
    FaceMeOriginal.install = "";
    FaceMeOriginal.installVariables = [];
    FaceMeOriginal.platforms = ["Android"];
    return FaceMeOriginal;
}(AwesomeCordovaNativePlugin));
var FaceMe = new FaceMeOriginal();
export { FaceMe };
//# sourceMappingURL=data:application/json;base64,